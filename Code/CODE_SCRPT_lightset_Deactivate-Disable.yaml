# ELEMENT OF: LIGHT-SET VIRTUAL OBJECT
# ==== Change Log ==============================================================
# 2025-04-26: Fixed an error in the lightset_map state_helper strings
# 2025-04-23: Update lightset_map to the naming conventions
# 2025-04-09: Works in initial tests

lightset_cancel:
  alias: Light Set | Cancel An Active Light-Set
  description: >
    **Member Of**: *Light-Set / Day-Dim App.* <br>
    **Purpose**: For a given light-set, if it is currently active, move it back to an
    inactive state. If any lights are currently on, leave them on. <br>
    **Requirements**: The calling automation must pass in the variable: 'lightset_label'
    and we presume that the light-set's state has been set to 'Cancel in Process'
    prior to calling into this script.

  # ==== Params in from calling automation or script ===========================
  fields:
    lightset_label:
      description: Label passed in by caller
      example: Light Set - Day Dim - Kitchen
      required: true

  # ==== Internal variables used in this script ================================
  variables:
    label_to_act_on: "{{ lightset_label }}"

    # This is copy/paste in from CODE_SNIP_Lightset-Map.yaml
    lightset_map:
      "Light-Set - Day-Dim | Test Set":
        state_helper: "input_select.lightset_test_set_state"
        start_state: "NoSetState"
        completed_state: "Inactive"

      "Light-Set - Day-Dim | Living Area":
        state_helper: "input_select.lightset_living_area_state"
        start_state: "NoSetState"
        completed_state: "Inactive"

      "Light-Set - Day-Dim | Kitchen":
        state_helper: "input_select.lightset_kitchen_state"
        start_state: "NoSetState"
        completed_state: "Inactive"

    lset_state_helper: "{{ lightset_map[lightset_label].state_helper | default('NoStateHelper') }}"
    entry_state: "{{ lightset_map[lightset_label].start_state | default('NoSetState') }}"
    exit_state: "{{ lightset_map[lightset_label].completed_state | default('NoSetState') }}"

  sequence:
    # If this light set is one that wants us to set a specific state to be
    # in prior to taking our actions, set it now.
    - alias: Set Entry State of the Light-Set
      choose:
        - conditions: "{{ entry_state != 'NoSetState' }}"
          sequence:
            - action: input_select.select_option
              metadata: {}
              data:
                option: "{{ entry_state }}"
              target:
                entity_id: "{{ lset_state_helper }}"
            - delay:
                hours: 0
                minutes: 0
                seconds: 5
                milliseconds: 0

    # Ensure delay timer for lightset is turned off
    - alias: Call script to turn off lightset delay timer
      action: script.lightset_timer_off
      metadata: {}
      data:
        lightset_label: "{{ label_to_act_on }}"

    #Wait for any lights On/Off scripts in process to complete
    - alias: IF lights-on script is running, wait for it to complete
      choose:
        conditions: "{{ is_state('script.lightset_on_by_label', 'on') }}"
        sequence:
          wait_template: "{{ is_state('script.lightset_on_by_label', 'off') }}"

    - alias: IF lights-off script is running, wait for it to complete
      choose:
        - conditions: "{{ is_state('script.lightset_off_by_areas', 'on') }}"
          sequence:
            wait_template: "{{ is_state('script.lightset_off_by_areas', 'off') }}"

    # If this light set is one that wants us to set a specific state upon
    # completion of our actions, set it now, just before exit.
    - alias: Set Exit State of the Light-Set
      choose:
        - conditions: "{{ exit_state != 'NoSetState' }}"
          sequence:
            - action: input_select.select_option
              metadata: {}
              data:
                option: "{{ exit_state }}"
              target:
                entity_id: "{{ lset_state_helper }}"

mode: parallel
